using Microsoft.EntityFrameworkCore;
using Project.Data;
using Project.Dtos;
using Project.Exceptions;
using Project.Models;

namespace TestProject;

public class DbServiceClientTests
{
    private DatabaseContext GetInMemoryDbContext()
    {
        var options = new DbContextOptionsBuilder<DatabaseContext>()
            .UseInMemoryDatabase(Guid.NewGuid().ToString())
            .Options;
        return new DatabaseContext(options);
    }

    [Fact]
    public async Task AddClient_ShouldAddPhysicalIndividual()
    {
        var context = GetInMemoryDbContext();
        var service = new TestDbService(context);

        var dto = new NewClientDto
        {
            Address = "Test St",
            Email = "user@example.com",
            Phone = 123456789,
            IsCompany = false,
            Name = "John",
            Surname = "Doe",
            PESEL = 123456789
        };

        await service.AddClient(dto);

        var client = await context.Clients.FirstOrDefaultAsync();
        var individual = await context.PhysicalIndividuals.FindAsync(client.Id);

        Assert.NotNull(client);
        Assert.NotNull(individual);
        Assert.Equal("John", individual.Name);
    }

    [Fact]
    public async Task AddClient_ShouldAddCompany()
    {
        var context = GetInMemoryDbContext();
        var service = new TestDbService(context);

        var dto = new NewClientDto
        {
            Address = "Biz Rd",
            Email = "biz@example.com",
            Phone = 987654321,
            IsCompany = true,
            CompanyName = "ACME Corp",
            KRS = "987654321"
        };

        await service.AddClient(dto);

        var client = await context.Clients.FirstOrDefaultAsync();
        var company = await context.Companies.FindAsync(client.Id);

        Assert.NotNull(client);
        Assert.NotNull(company);
        Assert.Equal("ACME Corp", company.Name);
    }

    [Fact]
    public async Task DeleteClient_ShouldSoftDeleteIndividual()
    {
        var context = GetInMemoryDbContext();
        var service = new TestDbService(context);

        // Add individual client directly as a PhysicalIndividual
        var individualToAdd = new PhysicalIndividual
        {
            Address = "A",
            Email = "e@e.com",
            Phone = 111,
            Name = "Test",
            Surname = "User",
            PESEL = 123
        };

        // Add the derived type (PhysicalIndividual) to the base DbSet (Clients)
        context.Clients.Add(individualToAdd);
        await context.SaveChangesAsync();

        // Now, individualToAdd has the ID generated by EF Core
        // Use this ID to interact with the client in the service and retrieve it later
        var clientId = individualToAdd.Id;

        // Act
        await service.DeleteClient(clientId);

        // Assert
        // When querying, query the base DbSet and then assert its type and properties.
        // FindAsync on PhysicalIndividuals DbSet might still work if you have it configured,
        // but the most robust way with TPH is to query the base and cast.
        var updatedClient = await context.Clients.FindAsync(clientId);

        Assert.NotNull(updatedClient); // Ensure it's still there after soft delete

        // Assert that it's still a PhysicalIndividual, even after "deletion" state change
        Assert.IsType<PhysicalIndividual>(updatedClient);

        var updatedIndividual = (PhysicalIndividual)updatedClient; // Cast to access derived properties

        Assert.Equal("DELETED", updatedIndividual.Name);
        Assert.Equal("DELETED", updatedIndividual.Surname); // Assuming surname is also set to DELETED
        Assert.Equal(0, updatedIndividual.PESEL);
        Assert.Equal("deleted@example.com", updatedIndividual.Email);
        Assert.Equal("DELETED", updatedIndividual.Address); // Assuming address is also set to DELETED
        Assert.Equal(0, updatedIndividual.Phone); // Assuming phone is also set to 0
    }

    [Fact]
    public async Task DeleteClient_ShouldThrowForCompany()
    {
        var context = GetInMemoryDbContext();
        var service = new TestDbService(context);

        // Directly add a Company instance to the base Clients DbSet
        var companyToAdd = new Company
        {
            Address = "B",
            Email = "biz@co.com",
            Phone = 222,
            Name = "BigCorp", // Company specific property
            KRS = "dasdasdasd"        // Company specific property
        };

        context.Clients.Add(companyToAdd); // Add the derived type to the base DbSet
        await context.SaveChangesAsync();

        // The ID generated by EF Core for the company
        var companyId = companyToAdd.Id;

        // Act & Assert
        // Expect a BadRequestException when trying to delete this company
        await Assert.ThrowsAsync<BadRequestException>(() => service.DeleteClient(companyId));

        // Optional: Verify that the company was NOT deleted (i.e., its properties are unchanged)
        var fetchedCompany = await context.Clients.OfType<Company>().FirstOrDefaultAsync(c => c.Id == companyId);
        Assert.NotNull(fetchedCompany);
        Assert.Equal("BigCorp", fetchedCompany.Name);
        Assert.Equal("B", fetchedCompany.Address); // Verify other properties if desired
    }

    [Fact]
    public async Task UpdateClient_ShouldUpdateIndividualFields()
    {
        var context = GetInMemoryDbContext();
        var service = new TestDbService(context);

        // CORRECT SETUP: Directly add a PhysicalIndividual instance to the Clients DbSet
        var originalIndividual = new PhysicalIndividual
        {
            Address = "Addr",
            Email = "old@em.com",
            Phone = 1,
            Name = "Old",
            Surname = "Name",
            PESEL = 111
        };
        context.Clients.Add(originalIndividual); // Add derived type to base DbSet
        await context.SaveChangesAsync(); // ID is now generated on originalIndividual

        var clientId = originalIndividual.Id; // Get the generated ID

        var dto = new UpdateClientDto
        {
            Address = "New Addr",
            Email = "new@em.com",
            Phone = 2,
            Name = "NewName",
            Surname = "NewSurname"
        };

        // Act
        await service.UpdateClient(clientId, dto);

        // Assert: Query the base DbSet and then cast for derived properties
        var updatedClient = await context.Clients.FindAsync(clientId);

        Assert.NotNull(updatedClient); // Ensure client exists
        Assert.IsType<PhysicalIndividual>(updatedClient); // Verify it's still a PhysicalIndividual

        var updatedIndividual = (PhysicalIndividual)updatedClient; // Cast for specific property access

        // Assert common client properties
        Assert.Equal("New Addr", updatedClient.Address);
        Assert.Equal("new@em.com", updatedClient.Email);
        Assert.Equal(2, updatedClient.Phone);

        // Assert individual-specific properties
        Assert.Equal("NewName", updatedIndividual.Name);
        Assert.Equal("NewSurname", updatedIndividual.Surname);
        Assert.Equal(111, updatedIndividual.PESEL); // PESEL was not in DTO, should remain unchanged
    }

    [Fact]
    public async Task UpdateClient_ShouldUpdateCompanyName()
    {
        var context = GetInMemoryDbContext();
        var service = new TestDbService(context);

        // CORRECT SETUP: Directly add a Company instance to the Clients DbSet
        var originalCompany = new Company
        {
            Address = "Start",
            Email = "email@em.com",
            Phone = 123,
            Name = "OldCorp", // Company-specific
            KRS = "dasdas"        // Company-specific
        };
        context.Clients.Add(originalCompany); // Add derived type to base DbSet
        await context.SaveChangesAsync(); // ID is now generated on originalCompany

        var companyId = originalCompany.Id; // Get the generated ID

        var dto = new UpdateClientDto
        {
            Address = "HQ",
            Email = "new@em.com",
            Phone = 456,
            CompanyName = "NewCorp"
        };

        // Act
        await service.UpdateClient(companyId, dto);

        // Assert: Query the base DbSet and then cast for derived properties
        var updatedClient = await context.Clients.FindAsync(companyId);

        Assert.NotNull(updatedClient); // Ensure client exists
        Assert.IsType<Company>(updatedClient); // Verify it's still a Company

        var updatedCompany = (Company)updatedClient; // Cast for specific property access

        // Assert common client properties
        Assert.Equal("HQ", updatedClient.Address);
        Assert.Equal("new@em.com", updatedClient.Email);
        Assert.Equal(456, updatedClient.Phone);

        // Assert company-specific property
        Assert.Equal("NewCorp", updatedCompany.Name);
        Assert.Equal("dasdas", updatedCompany.KRS); // KRS was not in DTO, should remain unchanged
    }
}
